package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
      
   boolean errorDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, CONST, CLASS, EXTENDS, ABSTRACT, VOID, BREAK, CONTINUE, READ, PRINT, RETURN, NEW, DOT;
terminal IF, ELSE, FOR;
terminal SEMI,  LBRACE, RBRACE, COMMA, ASSIGN, LSQPAREN, RSQPAREN, LPAREN, RPAREN;
terminal INC, DEC, PLUS, MINUS, AND, OR, MUL, DIV, MODUO, EQUAL, NEQUAL, GRT, GRTEQ, LST, LSTEQ;

terminal ADDASSIGN, SUBASSIGN, MULASSIGN, DIVASSIGN, MODUOASSIGN;

terminal String IDENT;
terminal Integer NUMBER;
terminal Boolean BOOL; /*Boolean*/
terminal Character CHAR;




nonterminal  ProgDeclList ProgDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal ProgDeclPart ProgDeclPart;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal AbstractClassDecl AbstractClassDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstList ConstList;
nonterminal ConstPart ConstPart;
nonterminal ConstType ConstType;
nonterminal VarList VarList;
nonterminal VarPart VarPart;
nonterminal VarDeclOpt VarDeclOpt;
nonterminal MethodDeclListOpt MethodDeclListOpt;
nonterminal Extend Extend;
nonterminal AbstractClassName AbstractClassName;
nonterminal AbstractMethodList AbstractMethodList;
nonterminal AbstractClassMethods AbstractClassMethods;
nonterminal AbsRegularMethod AbsRegularMethod;
nonterminal AbstractMethodDecl AbstractMethodDecl;
nonterminal RetType RetType;
nonterminal FormParsOpt FormParsOpt;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal FormParsPart FormParsPart;
nonterminal FormParsList FormParsList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Condition Condition;
nonterminal ElseOptStatement ElseOptStatement;
nonterminal DesignatorStmtOpt DesignatorStmtOpt;
nonterminal ConditionOpt ConditionOpt;
nonterminal RetVal RetVal;
nonterminal NumConstOpt NumConstOpt;
nonterminal DesigOperation DesigOperation;
nonterminal ActParsOptional ActParsOptional;
nonterminal ActPars ActPars;
nonterminal ConditionList ConditionList;
nonterminal CondTerm CondTerm;
nonterminal CondTermList CondTermList;
nonterminal CondFact CondFact;
nonterminal ExprMinusPlus ExprMinusPlus;
nonterminal ExprList ExprList;
nonterminal ArrExprOpt ArrExprOpt;
nonterminal ActualParamList ActualParamList;
nonterminal DesignatorList DesignatorList;
nonterminal DesignatorPart DesignatorPart;

nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal AddopRight AddopRight;
nonterminal MulopRight MulopRight;
nonterminal AddopLeft AddopLeft;
nonterminal MulopLeft MulopLeft;
nonterminal MinusEx MinusEx;
//za semantickuanal!
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, ClassName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Factor, Expr;

//precedence
precedence left ELSE;
//GRAMMAR

Program ::= (Program) PROG ProgName:p ProgDeclList:P1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, P1, M2); RESULT.setLine(pleft); :} 
			;
ProgName ::= (ProgName) IDENT:programName {: RESULT=new ProgName(programName); RESULT.setLine(programNameleft); :} 
		;
	
ProgDeclList ::= (ProgramVarDeclList) ProgDeclList:P1 ProgDeclPart:P2 {: RESULT=new ProgramVarDeclList(P1, P2); RESULT.setLine(P1left); :}
			|
			(NoProgramVarDeclList) {: RESULT=new NoProgramVarDeclList(); :} /*epsilon*/
			;
			
ProgDeclPart ::= (ProgDeclPartConst) ConstDecl:C1 {: RESULT=new ProgDeclPartConst(C1); RESULT.setLine(C1left); :}
			|
			(ProgDeclPartVar) VarDecl:V1 {: RESULT=new ProgDeclPartVar(V1); RESULT.setLine(V1left); :}
			|
			(ProgDeclPartAbstractClass)  AbstractClassDecl:A1 {: RESULT=new ProgDeclPartAbstractClass(A1); RESULT.setLine(A1left); :}
			|
			(AbstractClassDeclClassDecl) ClassDecl:C1 {: RESULT=new AbstractClassDeclClassDecl(C1); RESULT.setLine(C1left); :}
			;

ConstDecl ::= (ConstDecl) CONST Type:constType ConstList:C1 SEMI {: RESULT=new ConstDecl(constType, C1); RESULT.setLine(constTypeleft); :}
			;
Type ::= (Type) IDENT:t {: RESULT=new Type(t); RESULT.setLine(tleft); :} 
		;
			
ConstList ::= (Constants) ConstList:C1 COMMA ConstPart:C2 {: RESULT=new Constants(C1, C2); RESULT.setLine(C1left); :}
			|
			(ConstListPart) ConstPart:C1 {: RESULT=new ConstListPart(C1); RESULT.setLine(C1left); :}
			;
			
ConstPart ::= (ConstPart) IDENT:constName ASSIGN ConstType:C1 {: RESULT=new ConstPart(constName, C1); RESULT.setLine(constNameleft); :}
                ;
 
ConstType ::=  (CharacterConst) CHAR:character {: RESULT=new CharacterConst(character); RESULT.setLine(characterleft); :} 
           |
          (NumberConst) NUMBER:num {: RESULT=new NumberConst(num); RESULT.setLine(numleft); :}
          |
          (BooleanConst) BOOL:boolConst {: RESULT=new BooleanConst(boolConst); RESULT.setLine(boolConstleft); :}
          ;     
          
VarDecl ::= (VarDecl) Type:varType VarList:V1 SEMI {: RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); :}
		;
		
VarList ::= (VaribleList) VarList:V1 COMMA VarPart:part {: RESULT=new VaribleList(V1, part); RESULT.setLine(V1left); :}
		|
		(VarListPart) VarPart:V1 {: RESULT=new VarListPart(V1); RESULT.setLine(V1left); :}
		;   
		
VarPart ::= (VariablePart) IDENT:varName {: RESULT=new VariablePart(varName); RESULT.setLine(varNameleft); :}
		|      
        (ERROR1) error:l
        {: parser.report_error("Izvrsen oporavak od grekse pri deklarisanju promenljive u liniji "+lleft ,null);  :} {: RESULT=new ERROR1(); :}
		|
		(VariablePartArr) IDENT:varName LSQPAREN RSQPAREN {: RESULT=new VariablePartArr(varName); RESULT.setLine(varNameleft); :}
		;
		
MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
					;

ClassDecl ::= (ClassDecl) CLASS ClassName:cn Extend:E1 LBRACE VarDeclOpt:V2 MethodDeclListOpt:M3  RBRACE {: RESULT=new ClassDecl(cn, E1, V2, M3); RESULT.setLine(cnleft); :}
			;
			
ClassName ::=(ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :}				
			;

Extend ::= (ExtendTerm) EXTENDS IDENT:baseClass {: RESULT=new ExtendTerm(baseClass); RESULT.setLine(baseClassleft); :}
		|
		(NoExtend) {: RESULT=new NoExtend(); :} /*epsilon*/
		;
		
VarDeclOpt ::= (VariablesList) VarDeclOpt:V1 VarDecl:V2 {: RESULT=new VariablesList(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVariablesList) {: RESULT=new NoVariablesList(); :} /* epsilon */
			;

MethodDeclListOpt ::= (ClassMethodDecl) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassMethodDecl(M1); RESULT.setLine(M1left); :}
						|
						(NoMethodDeclListOptional) {: RESULT=new NoMethodDeclListOptional(); :} /*epsilon*/
						;
						
						
AbstractClassDecl ::= (AbstractClassDecl) ABSTRACT CLASS AbstractClassName:A1 Extend:E2 LBRACE VarDeclOpt:V3 AbstractClassMethods:A4 RBRACE {: RESULT=new AbstractClassDecl(A1, E2, V3, A4); RESULT.setLine(A1left); :}
					;
					
AbstractClassName ::= (AbstractClassName) IDENT:className {: RESULT=new AbstractClassName(className); RESULT.setLine(classNameleft); :}
					;
AbstractClassMethods ::= (AbsClassMethodDecl) LBRACE AbstractMethodList:A1 RBRACE {: RESULT=new AbsClassMethodDecl(A1); RESULT.setLine(A1left); :}
						  |
						  (NoAbstractClassMethods) {: RESULT=new NoAbstractClassMethods(); :} /*epsilon*/
						  ;
						  
AbstractMethodList ::= (AbstractMethodDeclList) AbstractMethodList:A1 AbsRegularMethod:A2 {: RESULT=new AbstractMethodDeclList(A1, A2); RESULT.setLine(A1left); :}
					| 
					(NoAbstractMethodList) {: RESULT=new NoAbstractMethodList(); :} /*epsilon*/
					;
		
AbsRegularMethod ::= (RegularMethod) MethodDecl:M1 {: RESULT=new RegularMethod(M1); RESULT.setLine(M1left); :}
					|
					(AbsMethod) AbstractMethodDecl:A1 {: RESULT=new AbsMethod(A1); RESULT.setLine(A1left); :}
					;
					
MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormParsOpt:F2 RPAREN VarDeclOpt:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :}
			;
MethodTypeName ::= (MethodTypeName) RetType:R1 IDENT:methodName {: RESULT=new MethodTypeName(R1, methodName); RESULT.setLine(R1left); :}
				;
AbstractMethodDecl ::= (AbstractMethodDeclaration) ABSTRACT RetType:R1 IDENT:methodName LPAREN FormParsOpt:F2 RPAREN SEMI {: RESULT=new AbstractMethodDeclaration(R1, methodName, F2); RESULT.setLine(R1left); :}
					;
		
RetType ::= (VoidRetType) VOID:retType {: RESULT=new VoidRetType(); :}
		|
		(TypeRetType) Type:retType {: RESULT=new TypeRetType(retType); RESULT.setLine(retTypeleft); :}
		;
		
FormParsOpt ::= (FormalParametersOpt) FormPars:F1 {: RESULT=new FormalParametersOpt(F1); RESULT.setLine(F1left); :}
			|
			(NoFormPars) {: RESULT=new NoFormPars(); :} /*epsilon*/
			;
			
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
                 |
                (NoStatements) {: RESULT=new NoStatements(); :} /*epsilon*/
                 ;	
                 
FormPars ::= (FormPars) FormParsList:F1 {: RESULT=new FormPars(F1); RESULT.setLine(F1left); :}
			;
			
FormParsList ::= (FormalParamsList) FormParsList:F1 COMMA FormParsPart:F2 {: RESULT=new FormalParamsList(F1, F2); RESULT.setLine(F1left); :}
				|
				(FormalParamsListPart) 	FormParsPart:F1 {: RESULT=new FormalParamsListPart(F1); RESULT.setLine(F1left); :}
				;

FormParsPart ::= (FormalParsPart) Type:fparType IDENT:fparName {: RESULT=new FormalParsPart(fparType, fparName); RESULT.setLine(fparTypeleft); :}
			| 
			(FormParsPartSqParent) Type:fparType IDENT:fparName LSQPAREN RSQPAREN {: RESULT=new FormParsPartSqParent(fparType, fparName); RESULT.setLine(fparTypeleft); :}
				;

Statement ::= (DesignatorStatementStatement) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatementStatement(D1); RESULT.setLine(D1left); :}
			|
            (ERROR2) error SEMI:l
            {: parser.report_error("Izvrsen oporavak od greske pri dodeli vrednosti do ; u liniji " +lleft,null);  :} {: RESULT=new ERROR2(); :}
			|
			(IfStatement) IF LPAREN Condition:C1 RPAREN ElseOptStatement:E2 {: RESULT=new IfStatement(C1, E2); RESULT.setLine(C1left); :}
			|
			(ForStatement) FOR LPAREN DesignatorStmtOpt:D1 SEMI ConditionOpt:C2 SEMI DesignatorStmtOpt:D3 RPAREN Statement:S4 {: RESULT=new ForStatement(D1, C2, D3, S4); RESULT.setLine(D1left); :}
			|
			(BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
			|
			(ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
			|
			(ReturnStatement) RETURN RetVal:R1 SEMI {: RESULT=new ReturnStatement(R1); RESULT.setLine(R1left); :}
			|
			(ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
			|
			(PrintStatement) PRINT LPAREN Expr:E1 NumConstOpt:N2 RPAREN SEMI {: RESULT=new PrintStatement(E1, N2); RESULT.setLine(E1left); :}
			|
			(StatmentBrace)LBRACE StatementList:S1 RBRACE {: RESULT=new StatmentBrace(S1); RESULT.setLine(S1left); :}
			;
			
RetVal ::= (RetValue) Expr:retVal {: RESULT=new RetValue(retVal); RESULT.setLine(retValleft); :}
		|
		(NoRetVal) {: RESULT=new NoRetVal(); :} /*epsilon*/
		;		
			
NumConstOpt ::= (PrintNumConstOpt) COMMA NUMBER:N1 {: RESULT=new PrintNumConstOpt(N1); RESULT.setLine(N1left); :}
				  |
				  (NoNumConstOpt) {: RESULT=new NoNumConstOpt(); :} /*epsilon*/
				  ;
ElseOptStatement ::= (ElseStatement) ELSE Statement:S1 {: RESULT=new ElseStatement(S1); RESULT.setLine(S1left); :}
					|
					(NoElseStatement) {: RESULT=new NoElseStatement(); :} /*epsilon*/
					;
					
DesignatorStmtOpt ::= (OptionalDesignatorStmt) DesignatorStatement:D1 {: RESULT=new OptionalDesignatorStmt(D1); RESULT.setLine(D1left); :}
					| 
					(NoDesignatorStmt) {: RESULT=new NoDesignatorStmt(); :} /*epsilon*/ 
					;
					
ConditionOpt ::= (OptionalCondition) Condition:C1 {: RESULT=new OptionalCondition(C1); RESULT.setLine(C1left); :}
					|
					(NoCondition) {: RESULT=new NoCondition(); :} /* epsilon */
					;

DesignatorStatement ::= (DesignatorStatement) Designator:designator DesigOperation:D1 {: RESULT=new DesignatorStatement(designator, D1); RESULT.setLine(designatorleft); :} ;


DesigOperation ::= (DesigOperationAss) Assignop:A1 Expr:expr {: RESULT=new DesigOperationAss(A1, expr); RESULT.setLine(A1left); :}
					|
					(DesigOperationInc) INC {: RESULT=new DesigOperationInc(); :}
					|
					(DesigOperationDec) DEC {: RESULT=new DesigOperationDec(); :}
					|
					(DesigOperationActPar) LPAREN RPAREN {: RESULT=new DesigOperationActPar(); :}
					;
ActParsOptional ::= (ActualParsOptional) ActPars:A1 {: RESULT=new ActualParsOptional(A1); RESULT.setLine(A1left); :}
				|
				(NoActParsOptional) {: RESULT=new NoActParsOptional(); :} /* epsilon */
				;		
				
Condition ::= (Condition) ConditionList:C1 {: RESULT=new Condition(C1); RESULT.setLine(C1left); :}
			;

ConditionList ::= (ConditionsLisOR) ConditionList:C1 OR CondTerm:C2 {: RESULT=new ConditionsLisOR(C1, C2); RESULT.setLine(C1left); :}
				|
				(SingleCondList) CondTerm:C1 {: RESULT=new SingleCondList(C1); RESULT.setLine(C1left); :}
				;

CondTerm ::= (ConditionTerm) CondTermList:C1 {: RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); :} 
			;

CondTermList ::= (ConditionTermList) CondTermList:C1 AND CondFact:C2 {: RESULT=new ConditionTermList(C1, C2); RESULT.setLine(C1left); :}
			 | 
			 (ConditionTermListOne) CondFact:C1 {: RESULT=new ConditionTermListOne(C1); RESULT.setLine(C1left); :}
			 ;

CondFact ::= (CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :}
		 |
		 (CondFactExprRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactExprRelop(E1, R2, E3); RESULT.setLine(E1left); :} 
		 ;	

Expr ::= (Expr)  ExprMinusPlus:E1 ExprList:E2 {: RESULT=new Expr(E1, E2); RESULT.setLine(E1left); :}
		;

ExprMinusPlus ::= (ExprMinus) MinusEx:M1 Term:T2 {: RESULT=new ExprMinus(M1, T2); RESULT.setLine(M1left); :}
			|
			(ExprPlus) Term:T1 {: RESULT=new ExprPlus(T1); RESULT.setLine(T1left); :}
			;
			
MinusEx ::= (MinusExp) MINUS {: RESULT=new MinusExp(); :}
		;
		
ExprList ::= (AddopExpr) ExprList:E1 Addop:A2 Term:T3 {: RESULT=new AddopExpr(E1, A2, T3); RESULT.setLine(E1left); :}
			|
             (NoAddopExpr) {: RESULT=new NoAddopExpr(); :} /* epsilon */
               ; 

Term ::= (MulopTerm) Term:T1 Mulop:M2 Factor:fact {: RESULT=new MulopTerm(T1, M2, fact); RESULT.setLine(T1left); :}
		|
		 (FactorTerm) Factor:fact {: RESULT=new FactorTerm(fact); RESULT.setLine(factleft); :}
		;	
		
		
Factor ::= (DesignatorFactor) Designator:desig {: RESULT=new DesignatorFactor(desig); RESULT.setLine(desigleft); :}
			|
		   (FuncCallFactor) Designator:funcname LPAREN  RPAREN {: RESULT=new FuncCallFactor(funcname); RESULT.setLine(funcnameleft); :}
		    |
		   (ParentFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ParentFactor(E1); RESULT.setLine(E1left); :}
			|
		   (NumFactor) NUMBER:fact {: RESULT=new NumFactor(fact); RESULT.setLine(factleft); :}
			|
		   (CharFactor) CHAR:fact {: RESULT=new CharFactor(fact); RESULT.setLine(factleft); :}
		    |
		   (BoolFactor) BOOL:fact {: RESULT=new BoolFactor(fact); RESULT.setLine(factleft); :}
		    |
		   (NewTypeFactor) NEW Type:typeNew ArrExprOpt:A1 {: RESULT=new NewTypeFactor(typeNew, A1); RESULT.setLine(typeNewleft); :}
		   ;
		
ArrExprOpt ::= (ArrayExpr) LSQPAREN Expr:E1 RSQPAREN {: RESULT=new ArrayExpr(E1); RESULT.setLine(E1left); :}
			|
			(NoArrayExprOpt) {: RESULT=new NoArrayExprOpt(); :} /* epsilon */
			;
			

ActPars ::= (ActPars) ActualParamList:A1 {: RESULT=new ActPars(A1); RESULT.setLine(A1left); :} 
		;
			   
ActualParamList ::= (ActualParametersList) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParametersList(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParamExpr) Expr:E1 {: RESULT=new ActualParamExpr(E1); RESULT.setLine(E1left); :}
					;

Designator ::= (Designator) IDENT:name DesignatorList:D1 {: RESULT=new Designator(name, D1); RESULT.setLine(nameleft); :}
			;


                   
                            
DesignatorList ::= (DotDesignPart) DOT IDENT:name {: RESULT=new DotDesignPart(name); RESULT.setLine(nameleft); :} 
                  |
                  (ArrayDesignPart)  LSQPAREN Expr:e RSQPAREN {: RESULT=new ArrayDesignPart(e); RESULT.setLine(eleft); :}
                  |
                  (NoDesigList) {: RESULT=new NoDesigList(); :} /*epsilon*/
                  ;

Assignop ::= (Assignoper) ASSIGN {: RESULT=new Assignoper(); :}
			|
			(AssignopAddOpRight) AddopRight:A1 {: RESULT=new AssignopAddOpRight(A1); RESULT.setLine(A1left); :}
			|
			(AssignopMulOpRight) MulopRight:M1 {: RESULT=new AssignopMulOpRight(M1); RESULT.setLine(M1left); :}
			;

Relop ::= (EqualOp) EQUAL {: RESULT=new EqualOp(); :}
         |
       	 (NotEqual)  NEQUAL {: RESULT=new NotEqual(); :}
         |
       	 (GrtOp)  GRT {: RESULT=new GrtOp(); :}
         |
       	 (GrteOp)  GRTEQ {: RESULT=new GrteOp(); :}
         |
       	 (LessOp)  LST {: RESULT=new LessOp(); :}
         |
       	 (LesseOp)  LSTEQ {: RESULT=new LesseOp(); :}
         ; 
         
AddopLeft ::= (Addoper) PLUS {: RESULT=new Addoper(); :} 
		| 
		(Suboper) MINUS {: RESULT=new Suboper(); :}
		;
		
AddopRight ::= (AddAssigment) ADDASSIGN {: RESULT=new AddAssigment(); :}
			|
			(SubAssigment) SUBASSIGN {: RESULT=new SubAssigment(); :}
			;
			
Addop ::= (AddopBasic) AddopLeft:A1 {: RESULT=new AddopBasic(A1); RESULT.setLine(A1left); :}
		|
		(AddopAdvanced) AddopRight:A1 {: RESULT=new AddopAdvanced(A1); RESULT.setLine(A1left); :}
		;	
		
MulopLeft ::= (Muloper) MUL {: RESULT=new Muloper(); :}
		|
		(Divoper) DIV {: RESULT=new Divoper(); :}
		|
		(Modoper) MODUO {: RESULT=new Modoper(); :}
		;
		
MulopRight ::= (MulAssigment) MULASSIGN {: RESULT=new MulAssigment(); :}
			|
			(DivAssigment) DIVASSIGN {: RESULT=new DivAssigment(); :}
			|
			(ModAssigment) MODUOASSIGN {: RESULT=new ModAssigment(); :}
			;

Mulop ::= (MulopBasic) MulopLeft:M1 {: RESULT=new MulopBasic(M1); RESULT.setLine(M1left); :}
		|
		(MulopAdvanced) MulopRight:M1 {: RESULT=new MulopAdvanced(M1); RESULT.setLine(M1left); :}
		;				  